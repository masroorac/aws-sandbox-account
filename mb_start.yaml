AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template for setting up the Sandbox Account

# Parameters:
#   AccountIdSandbox:
#     Type: String
#     Description: "Put the Account ID of Sandbox account"

Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: organizationsAccessRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - organizations:*
              Resource: "*"
            - Effect: Allow
              Action:
              - logs:*
              Resource: "*"

  CreateSCP:
    Type: AWS::Lambda::Function
    DependsOn:
      - LambdaRole
    Properties:
      Code:
        ZipFile: |
          import boto3, json
          import cfnresponse
          import os
          import logging
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          def lambda_handler(event, context):
            response_data = {}
            try:
              client = boto3.client('organizations')
              if event["RequestType"] == "Create" or event["RequestType"] == "Update":
                logger.info("Event Body - " + json.dumps(event))
                policy = client.create_policy(
                  Content='{"Version": "2012-10-17","Statement": [{"Sid": "DenyAllOutsideUSandBR","Effect": "Deny","NotAction": ["iam:*","organizations:*","route53:*","budgets:*","waf:*","cloudfront:*","globalaccelerator:*","importexport:*","support:*"],"Resource": "*","Condition": {"StringNotEquals": {"aws:RequestedRegion": ["us-east-1","sa-east-1"]}}}]}',
                  Description='Denny all services outsite N.Virginia and South America',
                  Name='DenyAllOutsideUSandBR',
                  Type='SERVICE_CONTROL_POLICY'
                  )
  
                policy_id = policy['Policy']['PolicySummary']['Id']
                response = client.list_accounts()
                sandbox = 'Sandbox'
                accounts_name = [account['Name'] for account in response['Accounts']]
                accounts = [account['Id'] for account in response['Accounts']]
  
                for i, (name, id) in enumerate(zip(accounts_name, accounts)):
                  if sandbox in name: 
                    attach = client.attach_policy(
                    PolicyId=policy_id,
                    TargetId=str(id)
                    )
                
                logger.info("Response - " + json.dumps(response_data))
                cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)

              elif event["RequestType"] == "Delete":
                  logger.info("Event Body - " + json.dumps(event))
                  cfnresponse.send(event, context, cfnresponse.SUCCESS,{})
              else:
                  logger.info("Event Body - " + json.dumps(event))
                  cfnresponse.send(event, context, cfnresponse.FAILED,{})
            except Exception as e:
                  logger.error(e, exc_info=True)
                  response_data = {'Error': str(e)}
                  cfnresponse.send(event, context, cfnresponse.FAILED, response_data)

      FunctionName: CreateSCP
      Description: "Function for Create SCP to block create new resources outside us-east-1 and sa-east-1"
      Handler: index.lambda_handler
      Role: !GetAtt 'LambdaRole.Arn'
      Runtime: python3.7
      Timeout: 300

  ExecuteLambdaCustom:
    Type: 'Custom::CustomResource'
    DependsOn:
      - CreateSCP
    Properties:
      ServiceToken: !GetAtt 'CreateSCP.Arn'
      LambdaRegion: !Ref "AWS::Region"
      LambdaName: !Ref CreateSCP