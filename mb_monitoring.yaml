AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template for setting up the Sandbox Account

Resources:
  
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - 
          Effect: Allow
          Principal:
            Service:
              - lambda.amazonaws.com
          Action:
              - sts:AssumeRole
      Path: /
      Policies:
      -
        PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            -
              Effect: Allow
              Action:
                - dynamodb:*
                - sns:*
                - iam:*
                - logs:*
                - states:*
              Resource: '*'

  MonitoringFuction:
    Type: AWS::Lambda::Function
    DependsOn:
      - LambdaExecutionRole
    Properties:
      Code:
        ZipFile: |
          import boto3
          import os
          def lambda_handler(event, context):
            print ("lambda arn: " + context.invoked_function_arn)
            account_id = context.invoked_function_arn.split(":")[4]
            aws_region = os.environ['AWS_REGION']
    
            client = boto3.client('dynamodb', region_name=aws_region)
            sns = boto3.client('sns',region_name=aws_region)
            dynamodb = boto3.resource('dynamodb', region_name=aws_region)
            table = dynamodb.Table('Sandbox-DynamoTable')
            response = table.get_item(
              Key={
                'ID':1
                }   
              )
            item = response['Item']
            days = item['Days']
            update = table.update_item(
              Key={ 
                'ID':1
                },  
              UpdateExpression='SET Days = :val1',
              ExpressionAttributeValues={
                ':val1': days-1
                }  
              )
            response_decrease = table.get_item(
                Key={
                  'ID':1
                  } 
                ) 
            item_decrease = response_decrease['Item']
            days_decrease = item_decrease['Days']
            result = sns.list_topics()
            topics = [topic['TopicArn'] for topic in result['Topics']]
            topic_arn = 'arn:aws:sns:'+aws_region+':'+account_id+':Sandbox-SNSTopic'

            if topic_arn in topics:
              print(topic_arn)
            if days_decrease <= 1:
              alert = sns.publish(
              TopicArn=topic_arn,
              Message='Falta um dia para sua conta ser deletada.'
              )

            value = table.get_item(
              Key={
                'ID':1
                }   
              )
            item_new = value['Item']
            days_new = item_new['Days']
            return {'Days': days_new}
      FunctionName: MonitoringFuction
      Description: "Function for Monitoring how many days the account still have."
      Handler: index.lambda_handler
      Role: !GetAtt 'LambdaExecutionRole.Arn'
      Runtime: python3.7
      Timeout: 300

  ExecuteStepfunction:
    Type: AWS::Lambda::Function
    DependsOn:
      - LambdaExecutionRole
    Properties:
      Code:
        ZipFile: |
          import boto3, json, traceback, time
          import cfnresponse
          import logging
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          def lambda_handler(event, context):
            response_data = {}
            try:
                  client = boto3.client('stepfunctions', region_name=event['ResourceProperties']["StateRegions"])
                  if event["RequestType"] == "Create" or event["RequestType"] == "Update":
                    logger.info("Event Body - " + json.dumps(event))

                    executestate = event['ResourceProperties']['ExecuteStateArn']
                    Region = event['ResourceProperties']["StateRegions"]
                    StateArn = client.start_execution(
                      stateMachineArn=executestate,
                      input="{}"
                    )['executionArn']
                    logger.info("executionArn - " + StateArn)
                    response_data['executeArn'] = StateArn

                    logger.info("Response - " + json.dumps(response_data))
                    cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data, StateArn)

                  elif event["RequestType"] == "Delete":
                      logger.info("Event Body - " + json.dumps(event))
                      cfnresponse.send(event, context, cfnresponse.SUCCESS,{})
                  else:
                      logger.info("Event Body - " + json.dumps(event))
                      cfnresponse.send(event, context, cfnresponse.FAILED,{})
            except Exception as e:
                  msg = 'See details in CloudWatch Log Stream: ' + context.log_stream_name
                  response_data['exception'] = str(e)[0:255] + '... ' + msg
                  cfnresponse.send(event, context, cfnresponse.FAILED, response_data)
      FunctionName: ExecuteStepfunction
      Description: "Function for ExecuteStepfunction"
      Handler: index.lambda_handler
      Role: !GetAtt 'LambdaExecutionRole.Arn'
      Runtime: python3.7
      Timeout: 300  

  ExecuteStepCustom:
    Type: 'Custom::ExecuteStepCustom'
    Properties:
      ServiceToken: !GetAtt
        - ExecuteStepfunction
        - Arn
      StateRegions: !Ref "AWS::Region"
      ExecuteStateArn: !Ref StepFunctionMonitoring 

  DeleteAccount:
    Type: AWS::Lambda::Function
    DependsOn:
      - LambdaExecutionRole
    Properties:
      Code:
        ZipFile: |
          import boto3
          def lambda_handler(event, context):
            print("Conta deletada!")
      FunctionName: DeleteAccount
      Description: "Function for delete account"
      Handler: index.lambda_handler
      Role: !GetAtt 'LambdaExecutionRole.Arn'
      Runtime: python3.7
      Timeout: 300

  RoleStepFunction:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - 
          Effect: Allow
          Principal:
            Service:
              - states.amazonaws.com
          Action:
              - sts:AssumeRole
      Path: /
      Policies:
      -
        PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            -
              Effect: Allow
              Action:
                - dynamodb:*
                - sns:*
                - iam:*
                - logs:*
                - lambda:*
              Resource: '*'
  
  StepFunctionMonitoring:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      DefinitionString: !Sub |-
             {
              "Comment": "A Task Timer monitoring tool",
              "StartAt": "Trigger Lambda",
              "States": {
                  "Trigger Lambda":{
                    "Type": "Task",
                    "Resource": "${MonitoringFuction.Arn}",
                    "Next": "Less than one day?"
                  },
                  "Less than one day?":{
                    "Type": "Choice",
                    "Choices":[{
                      "Variable": "$.MonitoringFucntion.Days",
                      "NumericEquals": 1,
                      "Next": "Delete Account"
                      },{
                      "Variable": "$.MonitoringFucntion.Days",
                      "NumericGreaterThan": 1,
                      "Next": "MissingDays"
                      }  
                    ]
                    },
                    "Delete Account":{
                      "Type": "Task",
                      "Resource": "${DeleteAccount.Arn}",
                      "End": true
                    },
                    "MissingDays":{
                      "Type": "Task",
                      "Resource": "${MissingDaysFunction.Arn}",
                      "End": true 
                    }
                  }
              }
      RoleArn: !GetAtt [ RoleStepFunction, Arn ]

  MissingDaysFunction:
    Type: AWS::Lambda::Function
    DependsOn:
      - LambdaExecutionRole
    Properties:
      Code:
        ZipFile: |
          import boto3
          import os
          def lambda_handler(event, context):
            print ("lambda arn: " + context.invoked_function_arn)
            account_id = context.invoked_function_arn.split(":")[4]
            aws_region = os.environ['AWS_REGION']
            sns = boto3.client('sns', region_name=aws_region)
            dynamo = boto3.client('dynamodb', region_name=aws_region)
            table = dynamodb.Table('Sandbox-DynamoTable')
            response = table.get_item(
              Key={
                'ID':1
                }   
              )
            item = response['Item']
            days = item['Days']
            result = sns.list_topics()
            topics = [topic['TopicArn'] for topic in result['Topics']]
            topic_arn = 'arn:aws:sns:'+aws_region+':'+account_id+':Sandbox-SNSTopic'

            alert = sns.publish(
              TopicArn=topic_arn,
              Message='Falta'+ days +'para sua conta ser deletada.'
              )
      FunctionName: MissingDaysFunction
      Description: "Function for get missing days"
      Handler: index.lambda_handler
      Role: !GetAtt 'LambdaExecutionRole.Arn'
      Runtime: python3.7
      Timeout: 300

  CloudWatchEventRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - 
          Effect: Allow
          Principal:
            Service:
              - events.amazonaws.com
          Action:
              - sts:AssumeRole
      Path: /
      Policies:
      -
        PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            -
              Effect: Allow
              Action:
                - lambda:*
              Resource: '*'

  ExecuteCWE:
    Type: AWS::Lambda::Function
    DependsOn:
      - LambdaExecutionRole
    Properties:
      Code:
        ZipFile: |
          import boto3
          def lambda_handler(event, context):
            client = boto3.client('stepfunctions')

            state_machine = client.list_state_machines()
            state_machine_arn = state_machine['Arn']

            response = client.start_execution(
              stateMarchineArn=state_machine_arn
            )
      FunctionName: ExecuteCWE
      Description: "Function for execute cwe"
      Handler: index.lambda_handler
      Role: !GetAtt 'LambdaExecutionRole.Arn'
      Runtime: python3.7
      Timeout: 300
  
  CloudWatchEvent:
    Type: "AWS::Events::Rule"
    DependsOn:
      - CloudWatchEventRole
      - ExecuteCWE
    Properties:
      Description: "Scheduled trigger step function every day"
      ScheduleExpression: "rate(1 day)"
      State: "ENABLED"
      RoleArn: !GetAtt [ CloudWatchEventRole, Arn ]
      Targets:
        -
          Arn: !GetAtt 'ExecuteCWE.Arn'
          Id: "ExecuteCWE"
