AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template for setting up the Sandbox Account

Parameters:
    AddrEmail:
       Type: String
       Description: "Add your email for receive notification"

Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: dynamodbAccessRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - dynamodb:*
              Resource: "*"
            - Effect: Allow
              Action:
              - logs:*
              Resource: "*"

  DynamoDB:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: ID
          AttributeType: N
      KeySchema:
        - AttributeName: ID
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TableName: "Sandbox-DynamoTable"
      Tags:
        -
          Key: "Name"
          Value: "Sandbox-DynamoTable"

  InsertDays:
    Type: AWS::Lambda::Function
    DependsOn:
      - LambdaRole
      - DynamoDB
    Properties:
      Code:
        ZipFile: |
          import boto3, json
          import cfnresponse
          import os
          import logging
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          def lambda_handler(event, context):
            response_data = {}
            try:
                  aws_region = os.environ['AWS_REGION']
                  client = boto3.client('dynamodb', region_name=aws_region)
                  if event["RequestType"] == "Create" or event["RequestType"] == "Update":
                    logger.info("Event Body - " + json.dumps(event))
                    dynamodb = boto3.resource('dynamodb', region_name=aws_region)
                    table = dynamodb.Table('Sandbox-DynamoTable')
                    response = table.get_item(
                      Key={
                        'ID':1
                        }   
                      )

                    table.put_item(
                      Item={
                        'ID': 1,
                        'Days': 5
                        }
                      )
                    
                    logger.info("Response - " + json.dumps(response_data))
                    cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)

                  elif event["RequestType"] == "Delete":
                      logger.info("Event Body - " + json.dumps(event))
                      cfnresponse.send(event, context, cfnresponse.SUCCESS,{})
                  else:
                      logger.info("Event Body - " + json.dumps(event))
                      cfnresponse.send(event, context, cfnresponse.FAILED,{})
            except Exception as e:
                  logger.error(e, exc_info=True)
                  response_data = {'Error': str(e)}
                  cfnresponse.send(event, context, cfnresponse.FAILED, response_data)
      FunctionName: InsertDays
      Description: "Function for insert days default 5 in dynamodb table"
      Handler: index.lambda_handler
      Role: !GetAtt 'LambdaRole.Arn'
      Runtime: python3.7
      Timeout: 300

  ExecuteLambdaCustom:
    Type: 'Custom::CustomResource'
    DependsOn:
      - DynamoDB
    Properties:
      ServiceToken: !GetAtt 'InsertDays.Arn'
      DynamoRegion: !Ref "AWS::Region"
      DynamoTableName: !Ref DynamoDB
  
  NotificationSNS:
        Type: "AWS::SNS::Topic"
        Properties:
            DisplayName: "Sandbox-SNSTopic"
            TopicName: "Sandbox-SNSTopic"
  
  SubscriptionSNS:
        Type: AWS::SNS::Subscription
        Properties: 
            TopicArn: !Ref 'NotificationSNS'
            Protocol: email
            Endpoint: !Ref AddrEmail



  